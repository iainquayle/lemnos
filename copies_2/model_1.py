import torch
class M1(torch.nn.Module):
	def __init__(self):
		super().__init__()
		import torch
		self.c0000_1 = torch.nn.Conv1d(56, 15, (1,), (1,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c0000_2 = torch.nn.ReLU6()
		self.c0000_3 = torch.nn.BatchNorm1d(15)
		self.c0001_1 = torch.nn.BatchNorm1d(15)
		self.c0002_1 = torch.nn.Conv1d(15, 16, (2,), (2,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c0002_2 = torch.nn.ReLU6()
		self.c0002_3 = torch.nn.BatchNorm1d(16)
		self.c0003_1 = torch.nn.Conv1d(16, 20, (2,), (2,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c0003_2 = torch.nn.ReLU6()
		self.c0003_3 = torch.nn.BatchNorm1d(20)
		self.c0004_1 = torch.nn.BatchNorm1d(20)
		self.c0005_1 = torch.nn.Conv1d(20, 62, (1,), (1,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c0005_2 = torch.nn.ReLU6()
		self.c0005_3 = torch.nn.BatchNorm1d(62)
		self.c0006_1 = torch.nn.Conv1d(62, 62, (7,), (1,), (3,), (1,), 62, bias=True, padding_mode='zeros')
		self.c0006_2 = torch.nn.ReLU6()
		self.c0006_3 = torch.nn.BatchNorm1d(62)
		self.c0007_1 = torch.nn.Conv1d(62, 20, (1,), (1,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c0007_2 = torch.nn.BatchNorm1d(20)
		self.c0008_1 = torch.nn.BatchNorm1d(20)
		self.c0009_1 = torch.nn.Conv1d(20, 36, (1,), (1,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c0009_2 = torch.nn.ReLU6()
		self.c0009_3 = torch.nn.BatchNorm1d(36)
		self.c000a_1 = torch.nn.Conv1d(36, 36, (7,), (1,), (3,), (1,), 36, bias=True, padding_mode='zeros')
		self.c000a_2 = torch.nn.ReLU6()
		self.c000a_3 = torch.nn.BatchNorm1d(36)
		self.c000b_1 = torch.nn.Conv1d(36, 20, (1,), (1,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c000b_2 = torch.nn.BatchNorm1d(20)
		self.c000c_1 = torch.nn.BatchNorm1d(20)
		self.c000d_1 = torch.nn.Conv1d(20, 65, (1,), (1,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c000d_2 = torch.nn.ReLU6()
		self.c000d_3 = torch.nn.BatchNorm1d(65)
		self.c000e_1 = torch.nn.Conv1d(65, 65, (7,), (1,), (3,), (1,), 65, bias=True, padding_mode='zeros')
		self.c000e_2 = torch.nn.ReLU6()
		self.c000e_3 = torch.nn.BatchNorm1d(65)
		self.c000f_1 = torch.nn.Conv1d(65, 20, (1,), (1,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c000f_2 = torch.nn.BatchNorm1d(20)
		self.c0010_1 = torch.nn.BatchNorm1d(20)
		self.c0011_1 = torch.nn.Conv1d(20, 69, (1,), (1,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c0011_2 = torch.nn.ReLU6()
		self.c0011_3 = torch.nn.BatchNorm1d(69)
		self.c0012_1 = torch.nn.Conv1d(69, 69, (7,), (1,), (3,), (1,), 69, bias=True, padding_mode='zeros')
		self.c0012_2 = torch.nn.ReLU6()
		self.c0012_3 = torch.nn.BatchNorm1d(69)
		self.c0013_1 = torch.nn.Conv1d(69, 20, (1,), (1,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c0013_2 = torch.nn.BatchNorm1d(20)
		self.c0014_1 = torch.nn.BatchNorm1d(20)
		self.c0015_1 = torch.nn.Conv1d(20, 46, (1,), (1,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c0015_2 = torch.nn.ReLU6()
		self.c0015_3 = torch.nn.BatchNorm1d(46)
		self.c0016_1 = torch.nn.Conv1d(46, 46, (7,), (1,), (3,), (1,), 46, bias=True, padding_mode='zeros')
		self.c0016_2 = torch.nn.ReLU6()
		self.c0016_3 = torch.nn.BatchNorm1d(46)
		self.c0017_1 = torch.nn.Conv1d(46, 20, (1,), (1,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c0017_2 = torch.nn.BatchNorm1d(20)
		self.c0018_1 = torch.nn.BatchNorm1d(20)
		self.c0019_1 = torch.nn.Conv1d(20, 30, (1,), (1,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c0019_2 = torch.nn.ReLU6()
		self.c0019_3 = torch.nn.BatchNorm1d(30)
		self.c001a_1 = torch.nn.Conv1d(30, 30, (7,), (1,), (3,), (1,), 30, bias=True, padding_mode='zeros')
		self.c001a_2 = torch.nn.ReLU6()
		self.c001a_3 = torch.nn.BatchNorm1d(30)
		self.c001b_1 = torch.nn.Conv1d(30, 20, (1,), (1,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c001b_2 = torch.nn.BatchNorm1d(20)
		self.c001c_1 = torch.nn.BatchNorm1d(20)
		self.c001d_1 = torch.nn.Conv1d(20, 49, (1,), (1,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c001d_2 = torch.nn.ReLU6()
		self.c001d_3 = torch.nn.BatchNorm1d(49)
		self.c001e_1 = torch.nn.Conv1d(49, 49, (7,), (1,), (3,), (1,), 49, bias=True, padding_mode='zeros')
		self.c001e_2 = torch.nn.ReLU6()
		self.c001e_3 = torch.nn.BatchNorm1d(49)
		self.c001f_1 = torch.nn.Conv1d(49, 20, (1,), (1,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c001f_2 = torch.nn.BatchNorm1d(20)
		self.c0020_1 = torch.nn.BatchNorm1d(20)
		self.c0021_1 = torch.nn.Conv1d(20, 22, (1,), (1,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c0021_2 = torch.nn.ReLU6()
		self.c0021_3 = torch.nn.BatchNorm1d(22)
		self.c0022_1 = torch.nn.Conv1d(22, 22, (7,), (1,), (3,), (1,), 22, bias=True, padding_mode='zeros')
		self.c0022_2 = torch.nn.ReLU6()
		self.c0022_3 = torch.nn.BatchNorm1d(22)
		self.c0023_1 = torch.nn.Conv1d(22, 20, (1,), (1,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c0023_2 = torch.nn.BatchNorm1d(20)
		self.c0024_1 = torch.nn.BatchNorm1d(20)
		self.c0025_1 = torch.nn.Conv1d(20, 68, (1,), (1,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c0025_2 = torch.nn.ReLU6()
		self.c0025_3 = torch.nn.BatchNorm1d(68)
		self.c0026_1 = torch.nn.Conv1d(68, 68, (7,), (1,), (3,), (1,), 68, bias=True, padding_mode='zeros')
		self.c0026_2 = torch.nn.ReLU6()
		self.c0026_3 = torch.nn.BatchNorm1d(68)
		self.c0027_1 = torch.nn.Conv1d(68, 20, (1,), (1,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c0027_2 = torch.nn.BatchNorm1d(20)
		self.c0028_1 = torch.nn.BatchNorm1d(20)
		self.c0029_1 = torch.nn.Conv1d(20, 54, (1,), (1,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c0029_2 = torch.nn.ReLU6()
		self.c0029_3 = torch.nn.BatchNorm1d(54)
		self.c002a_1 = torch.nn.Conv1d(54, 54, (7,), (1,), (3,), (1,), 54, bias=True, padding_mode='zeros')
		self.c002a_2 = torch.nn.ReLU6()
		self.c002a_3 = torch.nn.BatchNorm1d(54)
		self.c002b_1 = torch.nn.Conv1d(54, 20, (1,), (1,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c002b_2 = torch.nn.BatchNorm1d(20)
		self.c002c_1 = torch.nn.BatchNorm1d(20)
		self.c002d_1 = torch.nn.Conv1d(20, 27, (2,), (2,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c002d_2 = torch.nn.ReLU6()
		self.c002d_3 = torch.nn.BatchNorm1d(27)
		self.c002e_1 = torch.nn.Conv1d(27, 33, (2,), (2,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c002e_2 = torch.nn.ReLU6()
		self.c002e_3 = torch.nn.BatchNorm1d(33)
		self.c002f_1 = torch.nn.Conv1d(33, 52, (2,), (2,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c002f_2 = torch.nn.ReLU6()
		self.c002f_3 = torch.nn.BatchNorm1d(52)
		self.c0030_1 = torch.nn.Conv1d(52, 42, (2,), (2,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c0030_2 = torch.nn.ReLU6()
		self.c0030_3 = torch.nn.BatchNorm1d(42)
		self.c0031_1 = torch.nn.Conv1d(42, 28, (2,), (2,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c0031_2 = torch.nn.ReLU6()
		self.c0031_3 = torch.nn.BatchNorm1d(28)
		self.c0032_1 = torch.nn.Conv1d(28, 54, (2,), (2,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c0032_2 = torch.nn.ReLU6()
		self.c0032_3 = torch.nn.BatchNorm1d(54)
		self.c0033_1 = torch.nn.Linear(54, 1, bias=True)
	def forward(self, r0001):
		import torch
		r0001 = r0001.view(-1, 14336)
		r0001 = self.c0000_3(self.c0000_2(self.c0000_1(r0001.view(-1, 56, 256)))).view(-1, 3840)
		r0001 = self.c0001_1(r0001.view(-1, 15, 256)).view(-1, 3840)
		r0001 = self.c0002_3(self.c0002_2(self.c0002_1(r0001.view(-1, 15, 256)))).view(-1, 2048)
		r0001 = self.c0003_3(self.c0003_2(self.c0003_1(r0001.view(-1, 16, 128)))).view(-1, 1280)
		r0001 = self.c0004_1(r0001.view(-1, 20, 64)).view(-1, 1280)
		r0002 = self.c0005_3(self.c0005_2(self.c0005_1(r0001.view(-1, 20, 64)))).view(-1, 3968)
		r0002 = self.c0006_3(self.c0006_2(self.c0006_1(r0002.view(-1, 62, 64)))).view(-1, 3968)
		r0002 = self.c0007_2(self.c0007_1(r0002.view(-1, 62, 64))).view(-1, 1280)
		r0002 = self.c0008_1((r0001 + r0002).view(-1, 20, 64)).view(-1, 1280)
		r0001 = self.c0009_3(self.c0009_2(self.c0009_1(r0002.view(-1, 20, 64)))).view(-1, 2304)
		r0001 = self.c000a_3(self.c000a_2(self.c000a_1(r0001.view(-1, 36, 64)))).view(-1, 2304)
		r0001 = self.c000b_2(self.c000b_1(r0001.view(-1, 36, 64))).view(-1, 1280)
		r0001 = self.c000c_1((r0002 + r0001).view(-1, 20, 64)).view(-1, 1280)
		r0002 = self.c000d_3(self.c000d_2(self.c000d_1(r0001.view(-1, 20, 64)))).view(-1, 4160)
		r0002 = self.c000e_3(self.c000e_2(self.c000e_1(r0002.view(-1, 65, 64)))).view(-1, 4160)
		r0002 = self.c000f_2(self.c000f_1(r0002.view(-1, 65, 64))).view(-1, 1280)
		r0002 = self.c0010_1((r0001 + r0002).view(-1, 20, 64)).view(-1, 1280)
		r0001 = self.c0011_3(self.c0011_2(self.c0011_1(r0002.view(-1, 20, 64)))).view(-1, 4416)
		r0001 = self.c0012_3(self.c0012_2(self.c0012_1(r0001.view(-1, 69, 64)))).view(-1, 4416)
		r0001 = self.c0013_2(self.c0013_1(r0001.view(-1, 69, 64))).view(-1, 1280)
		r0001 = self.c0014_1((r0002 + r0001).view(-1, 20, 64)).view(-1, 1280)
		r0002 = self.c0015_3(self.c0015_2(self.c0015_1(r0001.view(-1, 20, 64)))).view(-1, 2944)
		r0002 = self.c0016_3(self.c0016_2(self.c0016_1(r0002.view(-1, 46, 64)))).view(-1, 2944)
		r0002 = self.c0017_2(self.c0017_1(r0002.view(-1, 46, 64))).view(-1, 1280)
		r0002 = self.c0018_1((r0001 + r0002).view(-1, 20, 64)).view(-1, 1280)
		r0001 = self.c0019_3(self.c0019_2(self.c0019_1(r0002.view(-1, 20, 64)))).view(-1, 1920)
		r0001 = self.c001a_3(self.c001a_2(self.c001a_1(r0001.view(-1, 30, 64)))).view(-1, 1920)
		r0001 = self.c001b_2(self.c001b_1(r0001.view(-1, 30, 64))).view(-1, 1280)
		r0001 = self.c001c_1((r0002 + r0001).view(-1, 20, 64)).view(-1, 1280)
		r0002 = self.c001d_3(self.c001d_2(self.c001d_1(r0001.view(-1, 20, 64)))).view(-1, 3136)
		r0002 = self.c001e_3(self.c001e_2(self.c001e_1(r0002.view(-1, 49, 64)))).view(-1, 3136)
		r0002 = self.c001f_2(self.c001f_1(r0002.view(-1, 49, 64))).view(-1, 1280)
		r0002 = self.c0020_1((r0001 + r0002).view(-1, 20, 64)).view(-1, 1280)
		r0001 = self.c0021_3(self.c0021_2(self.c0021_1(r0002.view(-1, 20, 64)))).view(-1, 1408)
		r0001 = self.c0022_3(self.c0022_2(self.c0022_1(r0001.view(-1, 22, 64)))).view(-1, 1408)
		r0001 = self.c0023_2(self.c0023_1(r0001.view(-1, 22, 64))).view(-1, 1280)
		r0001 = self.c0024_1((r0002 + r0001).view(-1, 20, 64)).view(-1, 1280)
		r0002 = self.c0025_3(self.c0025_2(self.c0025_1(r0001.view(-1, 20, 64)))).view(-1, 4352)
		r0002 = self.c0026_3(self.c0026_2(self.c0026_1(r0002.view(-1, 68, 64)))).view(-1, 4352)
		r0002 = self.c0027_2(self.c0027_1(r0002.view(-1, 68, 64))).view(-1, 1280)
		r0002 = self.c0028_1((r0001 + r0002).view(-1, 20, 64)).view(-1, 1280)
		r0001 = self.c0029_3(self.c0029_2(self.c0029_1(r0002.view(-1, 20, 64)))).view(-1, 3456)
		r0001 = self.c002a_3(self.c002a_2(self.c002a_1(r0001.view(-1, 54, 64)))).view(-1, 3456)
		r0001 = self.c002b_2(self.c002b_1(r0001.view(-1, 54, 64))).view(-1, 1280)
		r0001 = self.c002c_1((r0002 + r0001).view(-1, 20, 64)).view(-1, 1280)
		r0001 = self.c002d_3(self.c002d_2(self.c002d_1(r0001.view(-1, 20, 64)))).view(-1, 864)
		r0001 = self.c002e_3(self.c002e_2(self.c002e_1(r0001.view(-1, 27, 32)))).view(-1, 528)
		r0001 = self.c002f_3(self.c002f_2(self.c002f_1(r0001.view(-1, 33, 16)))).view(-1, 416)
		r0001 = self.c0030_3(self.c0030_2(self.c0030_1(r0001.view(-1, 52, 8)))).view(-1, 168)
		r0001 = self.c0031_3(self.c0031_2(self.c0031_1(r0001.view(-1, 42, 4)))).view(-1, 56)
		r0001 = self.c0032_3(self.c0032_2(self.c0032_1(r0001.view(-1, 28, 2)))).view(-1, 54)
		r0001 = self.c0033_1(r0001)
		return r0001