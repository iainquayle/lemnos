REMEBER: get a working first version. later versions can compile to flattened code and then be used in optimizers like torch compile or perhaps even triton

nodes of the same type can be set into stack open for or looking for mergers
it still really requires that there be a priority assigned, this will tell when a node can be explored further and popped off the stack 
for the example of the crossing connections, either the priority needs to be maliable at buildtime and keep increasing, orr it could be that the build ne vs join existing is the fix
	suppose the skip connection is told to join, while the main path is told to create new, the skip will be forced to wait
	for the honey comb, we could for the moment manually enter the priorities, then work on a version that does it automatically
	this would atleast give all functionality now while building for the future




two major types of repetition:
	sequential/tail
	fractal

make nodes that are purely dag, will throw if they see themselves
then have explicit repetition modules
the two forms may be able to just be rolled into one

other option is that groups can split? these split ends can be picked up later 
it still may be that case that it will be better to create wrapper modules.
while this idea would indeed work to atleast to some extent, it would require coordination across transition groups which would be error prone becuase of users 

defintely should start with a more rigid structure style,
the search space for an unrestricted model is too complex 


during build, nodes are looked for to be attached to?
if a node had already been attached to the other, then no other nodes of the same type can attach to that one?
