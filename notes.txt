changes:
	guarenteed:
		make a conformance struct
			contains
				shape, divisor, maybe bounds (for nodes that dont have a transform but likely not)
			let it deal with combining the conformance shapes and the divisors
		move the model saving to its own function
		make control framework agnostic
			move all that to the adapters
	possible:
		reimpl component interface, and add a validate shapes method	
			there are a number of not just specific to transform that require certain characterisitics of the shapes
		maybe move compile related stuff to its own module
			cant be moved too far, ie probably not sibling with schema due to import issues
		make the conv groups be able to take on some kind of enum?
			would like to make depthwise more clear than using none, as well may be able to add more group types
problems:

design:
	components < schema graph < compile < schema < adapter < control
	adapters
		allow this to work with any framework
		currently, using isinstance, but could use a nice approach
			look into the action/command? pattern and the visitor pattern, may provide some better structural ideas?
	make control agnostic
		start by making control specific to torch, but attempt to make it more generic later and accept an adapter
		adapter will use the source gen target and functions specific to the framework for training
		though this may be a dumb idea or atleast the sin of premature planning

v2 possibilities
	it may be easier to make it start from the bottom of the graph and work up
	would likely help for things that require certain divisors
	the issue is it will likely be worse for components that jump up in dimensionality
		maybe? though it may be just as complicated as it currently is
