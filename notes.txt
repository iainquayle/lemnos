changes:
	guarenteed:
		move the model saving to its own function
		make control framework agnostic
			move all that to the adapters
		print comments beside lines with the debug name of the node which the code is generated from
	possible:
		reimpl component interface, and add a validate shapes method	
			there are a number of not just specific to transform that require certain characterisitics of the shapes
		maybe move compile related stuff to its own module
			cant be moved too far, ie probably not sibling with schema due to import issues
		make the conv groups be able to take on some kind of enum?
			would like to make depthwise more clear than using none, as well may be able to add more group types
		move growth functions to their own module
		move conformance to its own module, then allow components to pull it in
			perhaps put it under shared
			perhpas rename shared to shape, as that seems to be the only thing it holds
		maybe move components to their own module
			but they are heavily linked to the schema as of right now
			but it could be argued that the ir node could copy them directly, then the schema wouldnt need to be held in IR
		add a divisor option to the clamp val on shape bounds
		consider making growth functions return the channels rather than a growth factor like they do now
			doesnt make much of a difference, but would mean that the inputted shape is always used, and theres no repeated calculations
		make it so the divisor lookahead doesnt take into account the nodes hint

problems:

design:
	components < schema graph < compile < schema < adapter < control
	adapters
		allow this to work with any framework
		currently, using isinstance, but could use a nice approach
			look into the action/command? pattern and the visitor pattern, may provide some better structural ideas?
	make control agnostic
		start by making control specific to torch, but attempt to make it more generic later and accept an adapter
		adapter will use the source gen target and functions specific to the framework for training
		though this may be a dumb idea or atleast the sin of premature planning
	transitions:
		are not split into different types as the coordination is done by compile modules
		they would otherwise need take in data from the compile module to decide what node to return

v2 possibilities
	it may be easier to make it start from the bottom of the graph and work up
	would likely help for things that require certain divisors
	the issue is it will likely be worse for components that jump up in dimensionality
		maybe? though it may be just as complicated as it currently is
