import torch
class M1(torch.nn.Module):
	def __init__(self):
		super().__init__()
		import torch
		self.c0000_1 = torch.nn.Conv1d(56, 5, (1,), (1,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c0000_2 = torch.nn.ReLU6()
		self.c0000_3 = torch.nn.BatchNorm1d(5)
		self.c0001_1 = torch.nn.BatchNorm1d(5)
		self.c0002_1 = torch.nn.Conv1d(5, 17, (4,), (4,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c0002_2 = torch.nn.ReLU6()
		self.c0002_3 = torch.nn.BatchNorm1d(17)
		self.c0003_1 = torch.nn.BatchNorm1d(17)
		self.c0004_1 = torch.nn.Conv1d(17, 28, (1,), (1,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c0004_2 = torch.nn.ReLU6()
		self.c0004_3 = torch.nn.BatchNorm1d(28)
		self.c0005_1 = torch.nn.Conv1d(28, 28, (7,), (1,), (3,), (1,), 28, bias=True, padding_mode='zeros')
		self.c0005_2 = torch.nn.ReLU6()
		self.c0005_3 = torch.nn.BatchNorm1d(28)
		self.c0006_1 = torch.nn.Conv1d(28, 17, (1,), (1,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c0006_2 = torch.nn.BatchNorm1d(17)
		self.c0007_1 = torch.nn.BatchNorm1d(17)
		self.c0008_1 = torch.nn.Conv1d(17, 58, (1,), (1,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c0008_2 = torch.nn.ReLU6()
		self.c0008_3 = torch.nn.BatchNorm1d(58)
		self.c0009_1 = torch.nn.Conv1d(58, 58, (7,), (1,), (3,), (1,), 58, bias=True, padding_mode='zeros')
		self.c0009_2 = torch.nn.ReLU6()
		self.c0009_3 = torch.nn.BatchNorm1d(58)
		self.c000a_1 = torch.nn.Conv1d(58, 17, (1,), (1,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c000a_2 = torch.nn.BatchNorm1d(17)
		self.c000b_1 = torch.nn.BatchNorm1d(17)
		self.c000c_1 = torch.nn.Conv1d(17, 50, (1,), (1,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c000c_2 = torch.nn.ReLU6()
		self.c000c_3 = torch.nn.BatchNorm1d(50)
		self.c000d_1 = torch.nn.Conv1d(50, 50, (7,), (1,), (3,), (1,), 50, bias=True, padding_mode='zeros')
		self.c000d_2 = torch.nn.ReLU6()
		self.c000d_3 = torch.nn.BatchNorm1d(50)
		self.c000e_1 = torch.nn.Conv1d(50, 17, (1,), (1,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c000e_2 = torch.nn.BatchNorm1d(17)
		self.c000f_1 = torch.nn.BatchNorm1d(17)
		self.c0010_1 = torch.nn.Conv1d(17, 61, (1,), (1,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c0010_2 = torch.nn.ReLU6()
		self.c0010_3 = torch.nn.BatchNorm1d(61)
		self.c0011_1 = torch.nn.Conv1d(61, 61, (7,), (1,), (3,), (1,), 61, bias=True, padding_mode='zeros')
		self.c0011_2 = torch.nn.ReLU6()
		self.c0011_3 = torch.nn.BatchNorm1d(61)
		self.c0012_1 = torch.nn.Conv1d(61, 17, (1,), (1,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c0012_2 = torch.nn.BatchNorm1d(17)
		self.c0013_1 = torch.nn.BatchNorm1d(17)
		self.c0014_1 = torch.nn.Conv1d(17, 48, (1,), (1,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c0014_2 = torch.nn.ReLU6()
		self.c0014_3 = torch.nn.BatchNorm1d(48)
		self.c0015_1 = torch.nn.Conv1d(48, 48, (7,), (1,), (3,), (1,), 48, bias=True, padding_mode='zeros')
		self.c0015_2 = torch.nn.ReLU6()
		self.c0015_3 = torch.nn.BatchNorm1d(48)
		self.c0016_1 = torch.nn.Conv1d(48, 17, (1,), (1,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c0016_2 = torch.nn.BatchNorm1d(17)
		self.c0017_1 = torch.nn.BatchNorm1d(17)
		self.c0018_1 = torch.nn.Conv1d(17, 31, (1,), (1,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c0018_2 = torch.nn.ReLU6()
		self.c0018_3 = torch.nn.BatchNorm1d(31)
		self.c0019_1 = torch.nn.Conv1d(31, 31, (7,), (1,), (3,), (1,), 31, bias=True, padding_mode='zeros')
		self.c0019_2 = torch.nn.ReLU6()
		self.c0019_3 = torch.nn.BatchNorm1d(31)
		self.c001a_1 = torch.nn.Conv1d(31, 17, (1,), (1,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c001a_2 = torch.nn.BatchNorm1d(17)
		self.c001b_1 = torch.nn.BatchNorm1d(17)
		self.c001c_1 = torch.nn.Conv1d(17, 36, (1,), (1,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c001c_2 = torch.nn.ReLU6()
		self.c001c_3 = torch.nn.BatchNorm1d(36)
		self.c001d_1 = torch.nn.Conv1d(36, 36, (7,), (1,), (3,), (1,), 36, bias=True, padding_mode='zeros')
		self.c001d_2 = torch.nn.ReLU6()
		self.c001d_3 = torch.nn.BatchNorm1d(36)
		self.c001e_1 = torch.nn.Conv1d(36, 17, (1,), (1,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c001e_2 = torch.nn.BatchNorm1d(17)
		self.c001f_1 = torch.nn.BatchNorm1d(17)
		self.c0020_1 = torch.nn.Conv1d(17, 61, (4,), (4,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c0020_2 = torch.nn.ReLU6()
		self.c0020_3 = torch.nn.BatchNorm1d(61)
		self.c0021_1 = torch.nn.Conv1d(61, 149, (4,), (4,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c0021_2 = torch.nn.ReLU6()
		self.c0021_3 = torch.nn.BatchNorm1d(149)
		self.c0022_1 = torch.nn.BatchNorm1d(149)
		self.c0023_1 = torch.nn.Conv1d(149, 352, (1,), (1,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c0023_2 = torch.nn.ReLU6()
		self.c0023_3 = torch.nn.BatchNorm1d(352)
		self.c0024_1 = torch.nn.Conv1d(352, 352, (7,), (1,), (3,), (1,), 352, bias=True, padding_mode='zeros')
		self.c0024_2 = torch.nn.ReLU6()
		self.c0024_3 = torch.nn.BatchNorm1d(352)
		self.c0025_1 = torch.nn.Conv1d(352, 149, (1,), (1,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c0025_2 = torch.nn.BatchNorm1d(149)
		self.c0026_1 = torch.nn.BatchNorm1d(149)
		self.c0027_1 = torch.nn.Conv1d(149, 172, (4,), (4,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c0027_2 = torch.nn.ReLU6()
		self.c0027_3 = torch.nn.BatchNorm1d(172)
		self.c0028_1 = torch.nn.BatchNorm1d(172)
		self.c0029_1 = torch.nn.Conv1d(172, 384, (1,), (1,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c0029_2 = torch.nn.ReLU6()
		self.c0029_3 = torch.nn.BatchNorm1d(384)
		self.c002a_1 = torch.nn.Conv1d(384, 384, (7,), (1,), (3,), (1,), 384, bias=True, padding_mode='zeros')
		self.c002a_2 = torch.nn.ReLU6()
		self.c002a_3 = torch.nn.BatchNorm1d(384)
		self.c002b_1 = torch.nn.Conv1d(384, 172, (1,), (1,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c002b_2 = torch.nn.BatchNorm1d(172)
		self.c002c_1 = torch.nn.BatchNorm1d(172)
		self.c002d_1 = torch.nn.Conv1d(172, 378, (1,), (1,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c002d_2 = torch.nn.ReLU6()
		self.c002d_3 = torch.nn.BatchNorm1d(378)
		self.c002e_1 = torch.nn.Conv1d(378, 378, (7,), (1,), (3,), (1,), 378, bias=True, padding_mode='zeros')
		self.c002e_2 = torch.nn.ReLU6()
		self.c002e_3 = torch.nn.BatchNorm1d(378)
		self.c002f_1 = torch.nn.Conv1d(378, 172, (1,), (1,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c002f_2 = torch.nn.BatchNorm1d(172)
		self.c0030_1 = torch.nn.BatchNorm1d(172)
		self.c0031_1 = torch.nn.Conv1d(172, 384, (1,), (1,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c0031_2 = torch.nn.ReLU6()
		self.c0031_3 = torch.nn.BatchNorm1d(384)
		self.c0032_1 = torch.nn.Conv1d(384, 384, (7,), (1,), (3,), (1,), 384, bias=True, padding_mode='zeros')
		self.c0032_2 = torch.nn.ReLU6()
		self.c0032_3 = torch.nn.BatchNorm1d(384)
		self.c0033_1 = torch.nn.Conv1d(384, 172, (1,), (1,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c0033_2 = torch.nn.BatchNorm1d(172)
		self.c0034_1 = torch.nn.BatchNorm1d(172)
		self.c0035_1 = torch.nn.Conv1d(172, 172, (4,), (4,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c0035_2 = torch.nn.ReLU6()
		self.c0035_3 = torch.nn.BatchNorm1d(172)
		self.c0036_1 = torch.nn.BatchNorm1d(172)
		self.c0037_1 = torch.nn.Conv1d(172, 384, (1,), (1,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c0037_2 = torch.nn.ReLU6()
		self.c0037_3 = torch.nn.BatchNorm1d(384)
		self.c0038_1 = torch.nn.Conv1d(384, 384, (7,), (1,), (3,), (1,), 384, bias=True, padding_mode='zeros')
		self.c0038_2 = torch.nn.ReLU6()
		self.c0038_3 = torch.nn.BatchNorm1d(384)
		self.c0039_1 = torch.nn.Conv1d(384, 172, (1,), (1,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c0039_2 = torch.nn.BatchNorm1d(172)
		self.c003a_1 = torch.nn.BatchNorm1d(172)
		self.c003b_1 = torch.nn.Conv1d(172, 150, (4,), (4,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c003b_2 = torch.nn.ReLU6()
		self.c003b_3 = torch.nn.BatchNorm1d(150)
		self.c003c_1 = torch.nn.Conv1d(150, 172, (4,), (4,), (0,), (1,), 1, bias=True, padding_mode='zeros')
		self.c003c_2 = torch.nn.ReLU6()
		self.c003c_3 = torch.nn.BatchNorm1d(172)
		self.c003d_1 = torch.nn.Linear(172, 1, bias=True)
	def forward(self, r0001):
		import torch
		r0001 = r0001.view(-1, 917504)
		r0001 = self.c0000_3(self.c0000_2(self.c0000_1(r0001.view(-1, 56, 16384)))).view(-1, 81920)
		r0001 = self.c0001_1(r0001.view(-1, 5, 16384)).view(-1, 81920)
		r0001 = self.c0002_3(self.c0002_2(self.c0002_1(r0001.view(-1, 5, 16384)))).view(-1, 69632)
		r0001 = self.c0003_1(r0001.view(-1, 17, 4096)).view(-1, 69632)
		r0002 = self.c0004_3(self.c0004_2(self.c0004_1(r0001.view(-1, 17, 4096)))).view(-1, 114688)
		r0002 = self.c0005_3(self.c0005_2(self.c0005_1(r0002.view(-1, 28, 4096)))).view(-1, 114688)
		r0002 = self.c0006_2(self.c0006_1(r0002.view(-1, 28, 4096))).view(-1, 69632)
		r0002 = self.c0007_1((r0001 + r0002).view(-1, 17, 4096)).view(-1, 69632)
		r0001 = self.c0008_3(self.c0008_2(self.c0008_1(r0002.view(-1, 17, 4096)))).view(-1, 237568)
		r0001 = self.c0009_3(self.c0009_2(self.c0009_1(r0001.view(-1, 58, 4096)))).view(-1, 237568)
		r0001 = self.c000a_2(self.c000a_1(r0001.view(-1, 58, 4096))).view(-1, 69632)
		r0001 = self.c000b_1((r0002 + r0001).view(-1, 17, 4096)).view(-1, 69632)
		r0002 = self.c000c_3(self.c000c_2(self.c000c_1(r0001.view(-1, 17, 4096)))).view(-1, 204800)
		r0002 = self.c000d_3(self.c000d_2(self.c000d_1(r0002.view(-1, 50, 4096)))).view(-1, 204800)
		r0002 = self.c000e_2(self.c000e_1(r0002.view(-1, 50, 4096))).view(-1, 69632)
		r0002 = self.c000f_1((r0001 + r0002).view(-1, 17, 4096)).view(-1, 69632)
		r0001 = self.c0010_3(self.c0010_2(self.c0010_1(r0002.view(-1, 17, 4096)))).view(-1, 249856)
		r0001 = self.c0011_3(self.c0011_2(self.c0011_1(r0001.view(-1, 61, 4096)))).view(-1, 249856)
		r0001 = self.c0012_2(self.c0012_1(r0001.view(-1, 61, 4096))).view(-1, 69632)
		r0001 = self.c0013_1((r0002 + r0001).view(-1, 17, 4096)).view(-1, 69632)
		r0002 = self.c0014_3(self.c0014_2(self.c0014_1(r0001.view(-1, 17, 4096)))).view(-1, 196608)
		r0002 = self.c0015_3(self.c0015_2(self.c0015_1(r0002.view(-1, 48, 4096)))).view(-1, 196608)
		r0002 = self.c0016_2(self.c0016_1(r0002.view(-1, 48, 4096))).view(-1, 69632)
		r0002 = self.c0017_1((r0001 + r0002).view(-1, 17, 4096)).view(-1, 69632)
		r0001 = self.c0018_3(self.c0018_2(self.c0018_1(r0002.view(-1, 17, 4096)))).view(-1, 126976)
		r0001 = self.c0019_3(self.c0019_2(self.c0019_1(r0001.view(-1, 31, 4096)))).view(-1, 126976)
		r0001 = self.c001a_2(self.c001a_1(r0001.view(-1, 31, 4096))).view(-1, 69632)
		r0001 = self.c001b_1((r0002 + r0001).view(-1, 17, 4096)).view(-1, 69632)
		r0002 = self.c001c_3(self.c001c_2(self.c001c_1(r0001.view(-1, 17, 4096)))).view(-1, 147456)
		r0002 = self.c001d_3(self.c001d_2(self.c001d_1(r0002.view(-1, 36, 4096)))).view(-1, 147456)
		r0002 = self.c001e_2(self.c001e_1(r0002.view(-1, 36, 4096))).view(-1, 69632)
		r0002 = self.c001f_1((r0001 + r0002).view(-1, 17, 4096)).view(-1, 69632)
		r0002 = self.c0020_3(self.c0020_2(self.c0020_1(r0002.view(-1, 17, 4096)))).view(-1, 62464)
		r0002 = self.c0021_3(self.c0021_2(self.c0021_1(r0002.view(-1, 61, 1024)))).view(-1, 38144)
		r0002 = self.c0022_1(r0002.view(-1, 149, 256)).view(-1, 38144)
		r0001 = self.c0023_3(self.c0023_2(self.c0023_1(r0002.view(-1, 149, 256)))).view(-1, 90112)
		r0001 = self.c0024_3(self.c0024_2(self.c0024_1(r0001.view(-1, 352, 256)))).view(-1, 90112)
		r0001 = self.c0025_2(self.c0025_1(r0001.view(-1, 352, 256))).view(-1, 38144)
		r0001 = self.c0026_1((r0002 + r0001).view(-1, 149, 256)).view(-1, 38144)
		r0001 = self.c0027_3(self.c0027_2(self.c0027_1(r0001.view(-1, 149, 256)))).view(-1, 11008)
		r0001 = self.c0028_1(r0001.view(-1, 172, 64)).view(-1, 11008)
		r0002 = self.c0029_3(self.c0029_2(self.c0029_1(r0001.view(-1, 172, 64)))).view(-1, 24576)
		r0002 = self.c002a_3(self.c002a_2(self.c002a_1(r0002.view(-1, 384, 64)))).view(-1, 24576)
		r0002 = self.c002b_2(self.c002b_1(r0002.view(-1, 384, 64))).view(-1, 11008)
		r0002 = self.c002c_1((r0001 + r0002).view(-1, 172, 64)).view(-1, 11008)
		r0001 = self.c002d_3(self.c002d_2(self.c002d_1(r0002.view(-1, 172, 64)))).view(-1, 24192)
		r0001 = self.c002e_3(self.c002e_2(self.c002e_1(r0001.view(-1, 378, 64)))).view(-1, 24192)
		r0001 = self.c002f_2(self.c002f_1(r0001.view(-1, 378, 64))).view(-1, 11008)
		r0001 = self.c0030_1((r0002 + r0001).view(-1, 172, 64)).view(-1, 11008)
		r0002 = self.c0031_3(self.c0031_2(self.c0031_1(r0001.view(-1, 172, 64)))).view(-1, 24576)
		r0002 = self.c0032_3(self.c0032_2(self.c0032_1(r0002.view(-1, 384, 64)))).view(-1, 24576)
		r0002 = self.c0033_2(self.c0033_1(r0002.view(-1, 384, 64))).view(-1, 11008)
		r0002 = self.c0034_1((r0001 + r0002).view(-1, 172, 64)).view(-1, 11008)
		r0002 = self.c0035_3(self.c0035_2(self.c0035_1(r0002.view(-1, 172, 64)))).view(-1, 2752)
		r0002 = self.c0036_1(r0002.view(-1, 172, 16)).view(-1, 2752)
		r0001 = self.c0037_3(self.c0037_2(self.c0037_1(r0002.view(-1, 172, 16)))).view(-1, 6144)
		r0001 = self.c0038_3(self.c0038_2(self.c0038_1(r0001.view(-1, 384, 16)))).view(-1, 6144)
		r0001 = self.c0039_2(self.c0039_1(r0001.view(-1, 384, 16))).view(-1, 2752)
		r0001 = self.c003a_1((r0002 + r0001).view(-1, 172, 16)).view(-1, 2752)
		r0001 = self.c003b_3(self.c003b_2(self.c003b_1(r0001.view(-1, 172, 16)))).view(-1, 600)
		r0001 = self.c003c_3(self.c003c_2(self.c003c_1(r0001.view(-1, 150, 4)))).view(-1, 172)
		r0001 = self.c003d_1(r0001)
		return r0001